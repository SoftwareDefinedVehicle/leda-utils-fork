#!/bin/sh
# shellcheck disable=SC3043
# shellcheck disable=SC1091
# shellcheck disable=SC2086
# shellcheck disable=SC2034
# shellcheck disable=SC2059
# shellcheck disable=SC2039
# /********************************************************************************
# * Copyright (c) 2023 Contributors to the Eclipse Foundation
# *
# * See the NOTICE file(s) distributed with this work for additional
# * information regarding copyright ownership.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Apache License 2.0 which is available at
# * https://www.apache.org/licenses/LICENSE-2.0
# *
# * SPDX-License-Identifier: Apache-2.0
# ********************************************************************************/


#### Default config values ####
VERBOSE=0
RELOAD=1

### CONSTANTS below

# kanto paths
KANTO_CMD="kanto-cm"
KANTO_CONFIG="/etc/container-management/config.json"
KANTO_SOCK=/run/container-management/container-management.sock

# colors
COL_NC='\e[39m'
COL_RED='\e[31m'
COL_GREEN='\e[32m'
COL_YELLOW='\e[33m'
COL_BLUE='\e[34m'
COL_GRAY='\e[90m'
COL_WHITE='\e[97m'
COL_NC_BOLD='\e[1;39m'

init_colors() {
	export TEXT_OK="${COL_GREEN}OK${COL_NC}"
	export TEXT_NOTICE="${COL_YELLOW}N/A${COL_NC}"
	export TEXT_WARN="${COL_YELLOW}WARNING${COL_NC}"
	export TEXT_FAIL="${COL_RED}FAILED!${COL_NC}"
	export SEPARATOR="${COL_GRAY}-----------------------------------------------------------${COL_NC}"
}

######################################################
#                        setup                       #
######################################################

display_help() {
		echo "Eclipse Kanto Container Manager Configuration Utility"
		echo "See https://websites.eclipseprojects.io/kanto/docs/references/containers/container-manager-config/"
		echo "Usage: $0 <command> {options}"
		echo "Commands:"
		echo "	add-registry -h <hostname> -u <username> -p <password>"
		echo "		Adds or replaces a container registry authentication configuration"
		echo "		-h or --hostname: Configure the hostname of the container registry (e.g. hub.docker.io, ghcr.io, ...)" 
		echo "		-u or --username: Configure the username" 
		echo "		-p or --password: Configure the password" 
		echo "	remove-registry -h <hostname>"
		echo "		Removes the specified container registry"
		echo "		-h or --hostname: The hostname of the container registry" 
		echo "	remove-all-registries"
		echo "		Removes all configured container registries"
		echo "	list-registries"
		echo "		Prints all configured container registries"
		echo "	show-config"
		echo "		Print the container management configuration"
		echo "	set-value <key> <value>"
		echo "		Set a primitive configuration value. Key in JSON Dot-Notation"
		echo "		Examples: $0 set-value containers.registry_configurations.MyRegistry.credentials.password foobar"
		echo "		          $0 set-value things.enable true"
		echo "Options:"
		echo "	--no-reload : Do not reload the configuration and restart the container-management service automatically"
		echo "	--ansi : Don't use colored output."
		echo "	--verbose | -v : Enable verbose mode."
		echo "	--help : This message."
		echo
		exit 0
}

while [ -n "$1" ]; do
	if [ "$1" = "add-registry" ]; then
		COMMAND=$1
		shift
		while [ -n "$1" ]; do 
			if [ "$1" = "-u" ] || [ "$1" = "--username" ]; then
				if [ -n "$2" ];	then
					shift
					REGISTRY_USERNAME="$1"
				fi;
			elif [ "$1" = "-p" ] || [ "$1" = "--password" ]; then
				if [ -n "$2" ];	then
					shift
					REGISTRY_PASSWORD="$1"
				fi;
			elif [ "$1" = "-h" ] || [ "$1" = "--hostname" ]; then
				if [ -n "$2" ];	then
					shift
					REGISTRY_HOSTNAME="$1"
				fi;
			else
				echo "Error: Unknown argument for command add-registry: $1"
				exit 1
			fi
			shift
		done
		if [ -z "${REGISTRY_USERNAME}" ] || [ -z "${REGISTRY_PASSWORD}" ] || [ -z "${REGISTRY_HOSTNAME}" ]; then
			echo "Error: missing arguments for command add-registry"
			echo "Usage:"
			echo "	$0 add-registry -h <hostname> -u <username> -p <password>"
			echo "	$0 add-registry --hostname <hostname> --username <username> --password <password>"
			echo ""
			echo "Note: For GitHub Container Registry, you can use a Personal Access Token (PAT) as password."
			echo "Example:"
			echo " $0 add-registry -h ghcr.io -u github -p <YOUR_PAT>"
			exit 1
		fi
	elif [ "$1" = "remove-registry" ]; then
		COMMAND=$1
		shift
		while [ -n "$1" ]; do 
			if [ "$1" = "-h" ] || [ "$1" = "--hostname" ]; then
				if [ -n "$2" ];	then
					shift
					REGISTRY_HOSTNAME="$1"
				fi;
			else
				echo "Error: Unknown argument for command remove-registry: $1"
				exit 1
			fi
			shift
		done
		if [ -z "${REGISTRY_HOSTNAME}" ]; then
			echo "Error: missing arguments for command remove-registry"
			echo "Usage:"
			echo "	$0 remove-registry -h <hostname>"
			echo "	$0 --reload remove-registry --hostname <hostname>"
			exit 1
		fi
	elif [ "$1" = "remove-all-registries" ]; then
		COMMAND=$1
		shift
		while [ -n "$1" ]; do 
			echo "Error: Unknown argument for command remove-all-registries: $1"
			exit 1
		done
	elif [ "$1" = "list-registries" ]; then
		COMMAND=$1
		shift
		while [ -n "$1" ]; do 
			echo "Error: Unknown argument for command list-registries: $1"
			exit 1
		done
	elif [ "$1" = "show-config" ]; then
		COMMAND=$1
		shift
		while [ -n "$1" ]; do 
			echo "Error: Unknown argument for command show-config: $1"
			exit 1
		done
	elif [ "$1" = "set-value" ]; then
		COMMAND=$1
		CONFIG_KEY=$2
		CONFIG_VALUE=$3
		if [ "$#" -ne 3 ]; then
			echo "ERROR: set-value command requires two arguments: <key> and <value>"
			exit 1
		else
			shift 2
		fi
	elif [ "$1" = "--no-reload" ] || [ "$1" = "-r" ]; then
		RELOAD=0
	elif [ "$1" = "--verbose" ] || [ "$1" = "-v" ]; then
		VERBOSE=1
	elif [ "$1" = "--ansi" ]; then
		# reset COL_XX for monochrome output
		export COL_NC=""
		export COL_RED=""
		export COL_GREEN=""
		export COL_YELLOW=""
		export COL_BLUE=""
		export COL_WHITE=""
		export COL_GRAY=""
		export COL_NC_BOLD=""
	elif [ "$1" = "--help" ]; then
		display_help
	else
		echo "ERROR: Unkown command or option: $1";
		echo "Try $0 --help"
		exit 1
	fi
	if [ "$#" -gt 0 ]; then
		shift
    fi
done

init_colors

#########################################
# Read Local / Global SDV configuration #
#########################################
# shellcheck source=/etc/sdv/sdv.conf
if [ -f "$HOME/.config/sdv.conf" ]; then
	. "$HOME/.config/sdv.conf"
	[ "$VERBOSE" = "1" ] && echo "# Config loaded from: $HOME/.config/sdv.conf" && grep -v  '^#' $HOME/.config/sdv.conf | sort -u
elif [ -f "/etc/sdv/sdv.conf" ]; then
	. "/etc/sdv/sdv.conf"
	[ "$VERBOSE" = "1" ] && echo "# Config loaded from: /etc/sdv/sdv.conf" && grep -v  '^#' /etc/sdv/sdv.conf | sort -u
else
	[ "$VERBOSE" = "1" ] && echo "# Config file not found!"
fi

######################################################
#                        commands                    #
######################################################

apply_changes() {
	local TMPFILE="$1"
	if [ -w ${KANTO_CONFIG} ]; then
		diff ${TMPFILE} ${KANTO_CONFIG} > /dev/null
		DIFF_RC=$?
		if [ "${DIFF_RC}" -eq 1 ]; then
			BACKUP=$(mktemp --tmpdir kanto-cm-config-backup.XXXXXXX)
			echo "Backing up to ${BACKUP}"
			echo "Applying changes:"
			cp ${KANTO_CONFIG} ${BACKUP}
			cp ${TMPFILE} ${KANTO_CONFIG}
			[ "$VERBOSE" = "1" ] &&	echo "Ok, changes applied."
			CHANGES_APPLIED=1
		elif [ "${DIFF_RC}" -eq 0 ]; then
			echo "No difference to existing configuration."
		else
			echo "Error ${DIFF_RC} trying to diff config files."
			exit ${DIFF_RC}
		fi
	else
		echo "Unable to apply changes:"
		jq < ${TMPFILE}
		echo "ERROR: No write permissions to ${KANTO_CONFIG}"
		echo "The changes cannot be applied automatically, as the current user does not have write permissions to ${KANTO_CONFIG}"
		echo "Either apply the configuration changes manually, or run this script with write permissions (e.g. use sudo):"
		echo "Run: sudo cp ${TMPFILE} ${KANTO_CONFIG}"
		exit 1
	fi

}

# Fragment for a new container registry configuration:
add_registry() {
	echo "Adding container registry $REGISTRY_HOSTNAME"
	TMPFILE=$(mktemp --tmpdir kanto-cm-config.XXXXXXX)
	jq \
	--arg REGISTRY_HOSTNAME "$REGISTRY_HOSTNAME" \
	--arg REGISTRY_USERNAME "$REGISTRY_USERNAME" \
	--arg REGISTRY_PASSWORD "$REGISTRY_PASSWORD" \
	'.containers.registry_configurations += {
         ($REGISTRY_HOSTNAME): {
             "credentials": {
                 "user_id": $REGISTRY_USERNAME,
                 "password": $REGISTRY_PASSWORD
             }
         } }' < ${KANTO_CONFIG} > ${TMPFILE}
	[ "$VERBOSE" = "1" ] && echo "Created temp file for modifications: ${TMPFILE}"

	apply_changes "${TMPFILE}"

	jq --arg REGISTRY_HOSTNAME "$REGISTRY_HOSTNAME" '.containers.registry_configurations | with_entries(select(.key|contains($REGISTRY_HOSTNAME)))' < ${KANTO_CONFIG} 
}

remove_registry() {
	echo "Removing container registry $REGISTRY_HOSTNAME"
	TMPFILE=$(mktemp --tmpdir kanto-cm-config.XXXXXXX)
	
	jq \
	--arg REGISTRY_HOSTNAME "$REGISTRY_HOSTNAME" \
	'del(.containers.registry_configurations[$REGISTRY_HOSTNAME])' < ${KANTO_CONFIG} > ${TMPFILE}
	
	[ "$VERBOSE" = "1" ] && echo "Created temp file for modifications: ${TMPFILE}"

	apply_changes "${TMPFILE}"

	jq '.containers.registry_configurations' < ${TMPFILE}
}

remove_all_registries() {
	echo "Removing all configured container registries"
	TMPFILE=$(mktemp --tmpdir kanto-cm-config.XXXXXXX)
	
	jq \
	--arg REGISTRY_HOSTNAME "$REGISTRY_HOSTNAME" \
	'del(.containers.registry_configurations)' < ${KANTO_CONFIG} > ${TMPFILE}
	
	[ "$VERBOSE" = "1" ] && echo "Created temp file for modifications: ${TMPFILE}"

	apply_changes "${TMPFILE}"
	
	jq < ${TMPFILE}
}

list_registries() {
	jq '.containers.registry_configurations | keys[]' < ${KANTO_CONFIG}
}

show_config() {
	jq < ${KANTO_CONFIG}
}

set_config() {
	echo "Setting configuration $CONFIG_KEY to $CONFIG_VALUE"
	TMPFILE=$(mktemp --tmpdir kanto-cm-config.XXXXXXX)
	CONFIG_KEY=".${CONFIG_KEY}"
	jq \
	--arg CONFIG_KEY "$CONFIG_KEY" \
	--arg CONFIG_VALUE "$CONFIG_VALUE" \
	'setpath( $CONFIG_KEY|split(".")[1:]; $CONFIG_VALUE)' < ${KANTO_CONFIG} > ${TMPFILE}
	[ "$VERBOSE" = "1" ] && echo "Created temp file for modifications: ${TMPFILE}"

	apply_changes "${TMPFILE}"
	
	jq < ${TMPFILE}
}

######################################################
#                        main                        #
######################################################

if [ -z "$COMMAND" ]; then
	display_help
	exit 0
fi 

[ "$COMMAND" = "add-registry" ] && add_registry
[ "$COMMAND" = "remove-registry" ] && remove_registry
[ "$COMMAND" = "remove-all-registries" ] && remove_all_registries
[ "$COMMAND" = "list-registries" ] && list_registries
[ "$COMMAND" = "show-config" ] && show_config
[ "$COMMAND" = "set-value" ] && set_config

if [ "$CHANGES_APPLIED" ]; then
	if [ "${RELOAD}" ]; then
		echo "Restarting Kanto Container-Management to apply changes..."
		systemctl restart container-management
		[ "$VERBOSE" = "1" ] &&	echo "Restart done."
	else
		echo "Note: Kanto requires a restart for the changes to take affect."
	fi
fi

exit 0