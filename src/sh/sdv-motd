#!/bin/sh
# shellcheck disable=SC2034
# shellcheck disable=SC1091
# shellcheck disable=SC2002
# /********************************************************************************
# * Copyright (c) 2022 Contributors to the Eclipse Foundation
# *
# * See the NOTICE file(s) distributed with this work for additional
# * information regarding copyright ownership.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Apache License 2.0 which is available at
# * https://www.apache.org/licenses/LICENSE-2.0
# *
# * SPDX-License-Identifier: Apache-2.0
# ********************************************************************************/

DISTRIB_DESCRIPTION=$(cat /etc/issue)

printf " _          _       \n"
printf "| | ___  __| | __ _ \n"
printf "| |/ _ \\/ _\` |/ _\` |\n"
printf "| |  __/ (_| | (_| |\n"
printf "|_|\___|\\__,_|\\__,_|\n"
printf "%s (%s %s %s)\n" "$DISTRIB_DESCRIPTION" "$(uname -o)" "$(uname -r)" "$(uname -m)"

# Date and time
DATUM=$(date +"%A, %e %B %Y")

# Hostname
HOST_NAME=$(hostname)

# Uptime
UP0=$(cut -d. -f1 /proc/uptime)
UP1=$((UP0/86400))
UP2=$((UP0/3600%24))
UP3=$((UP0/60%60))
UP4=$((UP0%60))

# Average cpu load
LOAD=$(cat /proc/loadavg)
LOAD1=$(echo "$LOAD" | awk '{print $1}')	# Last minute
LOAD2=$(echo "$LOAD" | awk '{print $2}')	# Last five minutes
LOAD3=$(echo "$LOAD" | awk '{print $3}')	# Last fifteen minutes

# Temperature - only for raspi
{ TEMP=$(vcgencmd measure_temp | cut -c '6-' | sed "s/'C//"); } 2>/dev/null

# Disk usage
ROOT_DISK=$(df -h | grep ' /$')
ROOT_DISK1=$(echo "$ROOT_DISK" | awk '{print $2}')	# Total
ROOT_DISK2=$(echo "$ROOT_DISK" | awk '{print $3}')	# Used
ROOT_DISK3=$(echo "$ROOT_DISK" | awk '{print $4}')	# Free

DATA_DISK=$(df -h | grep ' /data$')
DATA_DISK1=$(echo "$DATA_DISK" | awk '{print $2}')	# Total
DATA_DISK2=$(echo "$DATA_DISK" | awk '{print $3}')	# Used
DATA_DISK3=$(echo "$DATA_DISK" | awk '{print $4}')	# Free

# Memory usage
RAM=$(free -h | tr -d 'i')
RAM1=$(echo "$RAM" | grep 'Mem' | awk '{print $2}')	# Total
RAM2=$(echo "$RAM" | grep 'Mem' | awk '{print $3}')	# Used
RAM3=$(echo "$RAM" | grep 'Mem' | awk '{print $4}')	# Free
#RAM4=$(echo "$RAM" | grep 'Swap' | awk '{print $3}')	# Swap used

# Get IP adress
NET_DEVS=$(ip --brief a s scope global | grep -Fv -e "DOWN" -e "can" | awk '{print $1"\t"$3}')

# Fancy status report
# shellcheck disable=SC3037
# shellcheck disable=SC1091
# shellcheck disable=SC2059
printf "
\033[0;37mHostname......: \033[1;33m$HOST_NAME
\033[0;37mUptime........: $UP1 days, $UP2:$UP3 hours
\033[0;37mSystem load...: $LOAD1 (1min) \t| $LOAD2 (5min) \t| $LOAD3 (15min)
\033[0;37mDisk Space....: Root: $ROOT_DISK1 \t| Used: $ROOT_DISK2 \t| Free: $ROOT_DISK3
\033[0;37m                Data: $DATA_DISK1 \t| Used: $DATA_DISK2 \t| Free: $DATA_DISK3
\033[0;37mRAM ..........: Total: $RAM1 \t| Used: $RAM2 \t| Free: $RAM3\n"
if [ -z "$NET_DEVS" ]; then
    printf "\033[0;37mNetwork.......: \033[1;31mnot connected or activated!\n"
else
    printf "\033[0;37mNetwork.......: Interface: \t| IPv4 Address:\n"
    IFS=$(printf '\n ')
    for NET_DEV in $NET_DEVS
    do
        DEV=$(echo "$NET_DEV" | awk '{print $1}' | cut -d"/" -f1)
        IP4=$(echo "$NET_DEV" | awk '{print $2}' | cut -d"/" -f1)
        printf "                \033[1;35m%-15s\033[0m | \033[1;35m%-15s\n" "$DEV" "$IP4"
    done
fi

# Containers stats
if [ -w /run/container-management/container-management.sock ]; then
    CONTAINERS_TOTAL=$(kanto-cm list | grep -c "Running\|Stopped\|Exited")
    CONTAINERS_RUNNING=$(kanto-cm list | grep -c Running)
    CONTAINERS_STOPPED=$(kanto-cm list | grep -c Stopped)
    CONTAINERS_EXITED=$(kanto-cm list | grep -c Exited)
    printf "\033[0;37mContainers....: %s running \t| %s stopped \t| %s exited\033[m\n" "${CONTAINERS_RUNNING}" "${CONTAINERS_STOPPED}" "${CONTAINERS_EXITED}"
fi

printf "\033[mTo check SDV services health, run \033[0;37m$ \033[1;33msdv-health\033[m\n"
printf "Use \033[0;37m$ \033[1;33msdv-device-info\033[m to display device configuration\n"
printf "Use \033[0;37m$ \033[1;33msdv-provision\033[m to generate self-signed device certificates\n"
printf "\033[m\n"

if ! systemctl is-active --quiet container-management; then
    printf "\033[1;35mWarning: \033[1;33m Container Management is not yet up and running.\033[m\n"
fi

# Inform about pending reboot
if [ -r /run/systemd/shutdown/scheduled ]; then
    . /run/systemd/shutdown/scheduled;
    printf "\033[1;31m\033[5mSystem will %s at: $(date --date="@$(( USEC / 1000000 ))")\033[0m\n" "$MODE";
fi
